/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var fs = require('fs');
var cp = require('child_process');
var assert = require('assert');
var net = require('net');
var protocolClient_1 = require('./protocolClient');
var DebugClient = (function (_super) {
    __extends(DebugClient, _super);
    /**
     * Creates a DebugClient object that provides a promise-based API to write
     * debug adapter tests.
     * A simple mocha example for setting and hitting a breakpoint in line 15 of a program 'test.js' looks like this:
     *
     * var dc;
     * setup( () => {
     *     dc = new DebugClient('node', './out/node/nodeDebug.js', 'node');
     *     return dc.start();
     * });
     * teardown( () => dc.stop() );
     *
     * test('should stop on a breakpoint', () => {
     *     return dc.hitBreakpoint({ program: 'test.js' }, 'test.js', 15);
     * });
     */
    function DebugClient(runtime, executable, debugType) {
        _super.call(this);
        this.defaultTimeout = 5000;
        this._runtime = runtime;
        this._executable = executable;
        this._enableStderr = false;
        this._debugType = debugType;
        this._supportsConfigurationDoneRequest = false;
        if (DebugClient.CASE_INSENSITIVE_FILESYSTEM === undefined) {
            try {
                fs.accessSync(process.execPath.toLowerCase(), fs.F_OK);
                fs.accessSync(process.execPath.toUpperCase(), fs.F_OK);
                DebugClient.CASE_INSENSITIVE_FILESYSTEM = true;
            }
            catch (err) {
                DebugClient.CASE_INSENSITIVE_FILESYSTEM = false;
            }
        }
    }
    // ---- life cycle --------------------------------------------------------------------------------------------------------
    /**
     * Starts a new debug adapter and sets up communication via stdin/stdout.
     * If a port number is specified the adapter is not launched but a connection to
     * a debug adapter running in server mode is established. This is useful for debugging
     * the adapter while running tests. For this reason all timeouts are disabled in server mode.
     */
    DebugClient.prototype.start = function (port) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (typeof port === 'number') {
                _this._socket = net.createConnection(port, '127.0.0.1', function () {
                    _this.connect(_this._socket, _this._socket);
                    resolve();
                });
            }
            else {
                _this._adapterProcess = cp.spawn(_this._runtime, [_this._executable]);
                var sanitize_1 = function (s) { return s.toString().replace(/\r?\n$/mg, ''); };
                _this._adapterProcess.stderr.on('data', function (data) {
                    if (_this._enableStderr) {
                        console.log(sanitize_1(data));
                    }
                });
                _this._adapterProcess.on('error', function (err) {
                    console.log(err);
                    reject(err);
                });
                _this._adapterProcess.on('exit', function (code, signal) {
                    if (code) {
                    }
                });
                _this.connect(_this._adapterProcess.stdout, _this._adapterProcess.stdin);
                resolve();
            }
        });
    };
    /**
     * Shutdown the debuggee and the debug adapter (or disconnect if in server mode).
     */
    DebugClient.prototype.stop = function () {
        var _this = this;
        return this.disconnectRequest().then(function () {
            _this.stopAdapter();
        }).catch(function () {
            _this.stopAdapter();
        });
    };
    DebugClient.prototype.stopAdapter = function () {
        if (this._adapterProcess) {
            this._adapterProcess.kill();
            this._adapterProcess = null;
        }
        if (this._socket) {
            this._socket.end();
            this._socket = null;
        }
    };
    // ---- protocol requests -------------------------------------------------------------------------------------------------
    DebugClient.prototype.initializeRequest = function (args) {
        if (!args) {
            args = {
                adapterID: this._debugType,
                linesStartAt1: true,
                columnsStartAt1: true,
                pathFormat: 'path'
            };
        }
        return this.send('initialize', args);
    };
    DebugClient.prototype.configurationDoneRequest = function (args) {
        return this.send('configurationDone', args);
    };
    DebugClient.prototype.launchRequest = function (args) {
        return this.send('launch', args);
    };
    DebugClient.prototype.attachRequest = function (args) {
        return this.send('attach', args);
    };
    DebugClient.prototype.disconnectRequest = function (args) {
        return this.send('disconnect', args);
    };
    DebugClient.prototype.setBreakpointsRequest = function (args) {
        return this.send('setBreakpoints', args);
    };
    DebugClient.prototype.setFunctionBreakpointsRequest = function (args) {
        return this.send('setFunctionBreakpoints', args);
    };
    DebugClient.prototype.setExceptionBreakpointsRequest = function (args) {
        return this.send('setExceptionBreakpoints', args);
    };
    DebugClient.prototype.continueRequest = function (args) {
        return this.send('continue', args);
    };
    DebugClient.prototype.nextRequest = function (args) {
        return this.send('next', args);
    };
    DebugClient.prototype.stepInRequest = function (args) {
        return this.send('stepIn', args);
    };
    DebugClient.prototype.stepOutRequest = function (args) {
        return this.send('stepOut', args);
    };
    DebugClient.prototype.pauseRequest = function (args) {
        return this.send('pause', args);
    };
    DebugClient.prototype.stackTraceRequest = function (args) {
        return this.send('stackTrace', args);
    };
    DebugClient.prototype.scopesRequest = function (args) {
        return this.send('scopes', args);
    };
    DebugClient.prototype.variablesRequest = function (args) {
        return this.send('variables', args);
    };
    DebugClient.prototype.sourceRequest = function (args) {
        return this.send('source', args);
    };
    DebugClient.prototype.threadsRequest = function () {
        return this.send('threads');
    };
    DebugClient.prototype.evaluateRequest = function (args) {
        return this.send('evaluate', args);
    };
    // ---- convenience methods -----------------------------------------------------------------------------------------------
    /*
     * Returns a promise that will resolve if an event with a specific type was received within some specified time.
     * The promise will be rejected if a timeout occurs.
     */
    DebugClient.prototype.waitForEvent = function (eventType, timeout) {
        var _this = this;
        timeout = timeout || this.defaultTimeout;
        return new Promise(function (resolve, reject) {
            _this.on(eventType, function (event) {
                resolve(event);
            });
            if (!_this._socket) {
                setTimeout(function () {
                    reject(new Error("no event '" + eventType + "' received after " + timeout + " ms"));
                }, timeout);
            }
        });
    };
    /*
     * Returns a promise that will resolve if an 'initialized' event was received within some specified time
     * and a subsequent 'configurationDone' request was successfully executed.
     * The promise will be rejected if a timeout occurs or if the 'configurationDone' request fails.
     */
    DebugClient.prototype.configurationSequence = function () {
        var _this = this;
        return this.waitForEvent('initialized').then(function (event) {
            return _this.configurationDone();
        });
    };
    /**
     * Returns a promise that will resolve if a 'initialize' and a 'launch' request were successful.
     */
    DebugClient.prototype.launch = function (launchArgs) {
        var _this = this;
        return this.initializeRequest().then(function (response) {
            if (response.body && response.body.supportsConfigurationDoneRequest) {
                _this._supportsConfigurationDoneRequest = true;
            }
            return _this.launchRequest(launchArgs);
        });
    };
    DebugClient.prototype.configurationDone = function () {
        if (this._supportsConfigurationDoneRequest) {
            return this.configurationDoneRequest();
        }
        else {
            // if debug adapter doesn't support the configurationDoneRequest we have to send the setExceptionBreakpointsRequest.
            return this.setExceptionBreakpointsRequest({ filters: ['all'] });
        }
    };
    /*
     * Returns a promise that will resolve if a 'stopped' event was received within some specified time
     * and the event's reason and line number was asserted.
     * The promise will be rejected if a timeout occurs, the assertions fail, or if the 'stackTrace' request fails.
     */
    DebugClient.prototype.assertStoppedLocation = function (reason, expected) {
        var _this = this;
        return this.waitForEvent('stopped').then(function (event) {
            assert.equal(event.body.reason, reason);
            return _this.stackTraceRequest({
                threadId: event.body.threadId
            });
        }).then(function (response) {
            var frame = response.body.stackFrames[0];
            if (typeof expected.path === 'string') {
                _this.assertPath(frame.source.path, expected.path, 'stopped location: path mismatch');
            }
            if (typeof expected.line === 'number') {
                assert.equal(frame.line, expected.line, 'stopped location: line mismatch');
            }
            if (typeof expected.column === 'number') {
                assert.equal(frame.column, expected.column, 'stopped location: column mismatch');
            }
            return response;
        });
    };
    /*
     * Returns a promise that will resolve if enough output events with the given category have been received
     * and the concatenated data match the expected data.
     * The promise will be rejected as soon as the received data cannot match the expected data or if a timeout occurs.
     */
    DebugClient.prototype.assertOutput = function (category, expected, timeout) {
        var _this = this;
        timeout = timeout || this.defaultTimeout;
        return new Promise(function (resolve, reject) {
            var output = '';
            _this.on('output', function (event) {
                var e = event;
                if (e.body.category === category) {
                    output += e.body.output;
                    if (output.indexOf(expected) === 0) {
                        resolve(event);
                    }
                    else if (expected.indexOf(output) !== 0) {
                        var sanitize = function (s) { return s.toString().replace(/\r/mg, '\\r').replace(/\n/mg, '\\n'); };
                        reject(new Error("received data '" + sanitize(output) + "' is not a prefix of the expected data '" + sanitize(expected) + "'"));
                    }
                }
            });
            if (!_this._socket) {
                setTimeout(function () {
                    reject(new Error("not enough output data received after " + timeout + " ms"));
                }, timeout);
            }
        });
    };
    DebugClient.prototype.assertPath = function (path, expected, message) {
        if (DebugClient.CASE_INSENSITIVE_FILESYSTEM) {
            if (typeof path === 'string') {
                path = path.toLowerCase();
            }
            if (typeof expected === 'string') {
                expected = expected.toLowerCase();
            }
        }
        assert.equal(path, expected, message);
    };
    // ---- scenarios ---------------------------------------------------------------------------------------------------------
    /**
     * Returns a promise that will resolve if a configurable breakpoint has been hit within some time
     * and the event's reason and line number was asserted.
     * The promise will be rejected if a timeout occurs, the assertions fail, or if the requests fails.
     */
    DebugClient.prototype.hitBreakpoint = function (launchArgs, location, expected) {
        var _this = this;
        return Promise.all([
            this.waitForEvent('initialized').then(function (event) {
                return _this.setBreakpointsRequest({
                    lines: [location.line],
                    breakpoints: [{ line: location.line, column: location.column }],
                    source: { path: location.path }
                });
            }).then(function (response) {
                var bp = response.body.breakpoints[0];
                var verified = (typeof location.verified === 'boolean') ? location.verified : true;
                assert.equal(bp.verified, verified, 'breakpoint verification mismatch: verified');
                if (bp.source && bp.source.path) {
                    _this.assertPath(bp.source.path, location.path, 'breakpoint verification mismatch: path');
                }
                if (typeof bp.line === 'number') {
                    assert.equal(bp.line, location.line, 'breakpoint verification mismatch: line');
                }
                if (typeof location.column === 'number' && typeof bp.column === 'number') {
                    assert.equal(bp.column, location.column, 'breakpoint verification mismatch: column');
                }
                return _this.configurationDone();
            }),
            this.launch(launchArgs),
            this.assertStoppedLocation('breakpoint', expected || location)
        ]);
    };
    return DebugClient;
}(protocolClient_1.ProtocolClient));
exports.DebugClient = DebugClient;
//# sourceMappingURL=data:application/json;base64,