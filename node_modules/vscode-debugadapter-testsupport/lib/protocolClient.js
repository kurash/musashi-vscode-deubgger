/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ee = require('events');
var ProtocolClient = (function (_super) {
    __extends(ProtocolClient, _super);
    function ProtocolClient() {
        _super.call(this);
        this.pendingRequests = new Map();
        this.rawData = new Buffer(0);
        this.sequence = 1;
        this.contentLength = -1;
    }
    ProtocolClient.prototype.connect = function (readable, writable) {
        var _this = this;
        this.outputStream = writable;
        readable.on('data', function (data) {
            _this.handleData(data);
        });
    };
    ProtocolClient.prototype.send = function (command, args) {
        var _this = this;
        return new Promise(function (completeDispatch, errorDispatch) {
            _this.doSend(command, args, function (result) {
                if (result.success) {
                    completeDispatch(result);
                }
                else {
                    errorDispatch(new Error(result.message));
                }
            });
        });
    };
    ProtocolClient.prototype.doSend = function (command, args, clb) {
        var request = {
            type: 'request',
            seq: this.sequence++,
            command: command
        };
        if (args && Object.keys(args).length > 0) {
            request.arguments = args;
        }
        // store callback for this request
        this.pendingRequests.set(request.seq, clb);
        var json = JSON.stringify(request);
        this.outputStream.write("Content-Length: " + Buffer.byteLength(json, 'utf8') + "\r\n\r\n" + json, 'utf8');
    };
    ProtocolClient.prototype.handleData = function (data) {
        this.rawData = Buffer.concat([this.rawData, data]);
        while (true) {
            if (this.contentLength >= 0) {
                if (this.rawData.length >= this.contentLength) {
                    var message = this.rawData.toString('utf8', 0, this.contentLength);
                    this.rawData = this.rawData.slice(this.contentLength);
                    this.contentLength = -1;
                    if (message.length > 0) {
                        this.dispatch(message);
                    }
                    continue; // there may be more complete messages to process
                }
            }
            else {
                var idx = this.rawData.indexOf(ProtocolClient.TWO_CRLF);
                if (idx !== -1) {
                    var header = this.rawData.toString('utf8', 0, idx);
                    var lines = header.split('\r\n');
                    for (var i = 0; i < lines.length; i++) {
                        var pair = lines[i].split(/: +/);
                        if (pair[0] === 'Content-Length') {
                            this.contentLength = +pair[1];
                        }
                    }
                    this.rawData = this.rawData.slice(idx + ProtocolClient.TWO_CRLF.length);
                    continue;
                }
            }
            break;
        }
    };
    ProtocolClient.prototype.dispatch = function (body) {
        var rawData = JSON.parse(body);
        if (typeof rawData.event !== 'undefined') {
            var event_1 = rawData;
            this.emit(event_1.event, event_1);
        }
        else {
            var response = rawData;
            var clb = this.pendingRequests.get(response.request_seq);
            if (clb) {
                this.pendingRequests.delete(response.request_seq);
                clb(response);
            }
        }
    };
    ProtocolClient.TWO_CRLF = '\r\n\r\n';
    return ProtocolClient;
}(ee.EventEmitter));
exports.ProtocolClient = ProtocolClient;
//# sourceMappingURL=data:application/json;base64,